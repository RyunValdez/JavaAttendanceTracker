package Student_Attendance_User;

import static Student_Attendance_User.SA_Launcher.validIP;
import java.io.*;
import java.net.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
/**
 * @author rvald_000
 */
public class SA_Main extends javax.swing.JFrame {

    //Initialize Variables that need to be used in other methods
    String userName;
    String password;
    Socket clientSocket;
    String IP;
    int Port;
    /**
     * Creates new form Template_350
     * @param userName
     * @param IP
     * @param Port
     * @param cSocket
     */
    public SA_Main(String userName, String password, String IP, int Port, Socket cSocket) {
        //Set Variables that need to be used in other methods
        this.userName = userName;
        this.password = password;
        this.clientSocket = cSocket;
        this.IP = IP;
        this.Port = Port;
        
        //Set titles, screen location, and information labels
        initComponents();
        this.setTitle("Attendance Tracker");
        this.setLocation(500,300);
        user_Label.setText("<html><b>Username: </b>" + userName);
        IP_Label.setText("<html><b>IP Address: </b>" + IP);
        Port_Label.setText("<html><b>Port: </b>" + Port);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    public Socket getSocket(){
        return this.clientSocket;
    };
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Home_Pane = new javax.swing.JLayeredPane();
        mainTabbedPane = new javax.swing.JTabbedPane();
        classSrc_Panel = new javax.swing.JPanel();
        class_srcLabel = new javax.swing.JLabel();
        class_srcName = new javax.swing.JTextField();
        instructor_srcLabel = new javax.swing.JLabel();
        class_srcAdmin = new javax.swing.JTextField();
        class_srcButton = new javax.swing.JButton();
        class_scrollPanel = new javax.swing.JScrollPane();
        class_viewTable = new javax.swing.JTable();
        dropClass_Button = new javax.swing.JButton();
        addClass_Button = new javax.swing.JButton();
        attendClass_Button = new javax.swing.JButton();
        attendanceSrc_Panel = new javax.swing.JPanel();
        attendClassID_Text = new javax.swing.JTextField();
        attendClassID_Label = new javax.swing.JLabel();
        attendance_Label = new javax.swing.JLabel();
        chkAttend_Button = new javax.swing.JButton();
        chkAttendance_scrollPanel = new javax.swing.JScrollPane();
        chkAttendanceTable = new javax.swing.JTable();
        IP_Label = new javax.swing.JLabel();
        user_Label = new javax.swing.JLabel();
        Port_Label = new javax.swing.JLabel();
        main_MenuBar = new javax.swing.JMenuBar();
        connect_Menu = new javax.swing.JMenu();
        Connection_Menu = new javax.swing.JMenuItem();
        logout_Menu = new javax.swing.JMenu();
        Logout_Menu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        class_srcLabel.setText("Class Name:");

        instructor_srcLabel.setText("Instructor:");

        class_srcButton.setText("Search");
        class_srcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                class_srcButtonActionPerformed(evt);
            }
        });

        class_viewTable.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        class_viewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Class ID", "Name", "Institution", "Instructor", "Meet Time"
            }
        ));
        class_viewTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        class_viewTable.setRowHeight(48);
        class_scrollPanel.setViewportView(class_viewTable);

        dropClass_Button.setText("Drop Class");
        dropClass_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropClass_ButtonActionPerformed(evt);
            }
        });

        addClass_Button.setText("Enroll Class");
        addClass_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addClass_ButtonActionPerformed(evt);
            }
        });

        attendClass_Button.setText("Sign in to Class");
        attendClass_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attendClass_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout classSrc_PanelLayout = new javax.swing.GroupLayout(classSrc_Panel);
        classSrc_Panel.setLayout(classSrc_PanelLayout);
        classSrc_PanelLayout.setHorizontalGroup(
            classSrc_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(classSrc_PanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(classSrc_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(classSrc_PanelLayout.createSequentialGroup()
                        .addComponent(addClass_Button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dropClass_Button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(attendClass_Button))
                    .addGroup(classSrc_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(classSrc_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(classSrc_PanelLayout.createSequentialGroup()
                                .addGroup(classSrc_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(class_srcLabel)
                                    .addComponent(instructor_srcLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(27, 27, 27)
                                .addGroup(classSrc_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(class_srcAdmin, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(class_srcName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(class_srcButton))
                        .addComponent(class_scrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        classSrc_PanelLayout.setVerticalGroup(
            classSrc_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(classSrc_PanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(classSrc_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(class_srcName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(class_srcLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(classSrc_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(class_srcAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(instructor_srcLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(class_srcButton)
                .addGap(18, 18, 18)
                .addComponent(class_scrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(classSrc_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addClass_Button)
                    .addComponent(dropClass_Button)
                    .addComponent(attendClass_Button))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Class Search", classSrc_Panel);

        attendClassID_Label.setText("Class ID:");

        attendance_Label.setText("Check Attendance:");

        chkAttend_Button.setText("Check Attendance");
        chkAttend_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAttend_ButtonActionPerformed(evt);
            }
        });

        chkAttendanceTable.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        chkAttendanceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Class ID", "Class Name", "Institution Name", "Instructor", "Attended", "Date"
            }
        ));
        chkAttendanceTable.setRowHeight(48);
        chkAttendance_scrollPanel.setViewportView(chkAttendanceTable);

        javax.swing.GroupLayout attendanceSrc_PanelLayout = new javax.swing.GroupLayout(attendanceSrc_Panel);
        attendanceSrc_Panel.setLayout(attendanceSrc_PanelLayout);
        attendanceSrc_PanelLayout.setHorizontalGroup(
            attendanceSrc_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attendanceSrc_PanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(attendanceSrc_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkAttendance_scrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attendance_Label)
                    .addGroup(attendanceSrc_PanelLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(attendClassID_Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(attendanceSrc_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkAttend_Button)
                            .addComponent(attendClassID_Text, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 25, Short.MAX_VALUE))
        );
        attendanceSrc_PanelLayout.setVerticalGroup(
            attendanceSrc_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attendanceSrc_PanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(attendance_Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(attendanceSrc_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attendClassID_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attendClassID_Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkAttend_Button)
                .addGap(18, 18, 18)
                .addComponent(chkAttendance_scrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Attendance", attendanceSrc_Panel);

        IP_Label.setText("IP Address:");

        user_Label.setText("Username:");

        Port_Label.setText("Port:");

        javax.swing.GroupLayout Home_PaneLayout = new javax.swing.GroupLayout(Home_Pane);
        Home_Pane.setLayout(Home_PaneLayout);
        Home_PaneLayout.setHorizontalGroup(
            Home_PaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Home_PaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(IP_Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Port_Label)
                .addGap(170, 170, 170)
                .addComponent(user_Label)
                .addGap(125, 125, 125))
        );
        Home_PaneLayout.setVerticalGroup(
            Home_PaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Home_PaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(Home_PaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IP_Label)
                    .addComponent(user_Label)
                    .addComponent(Port_Label)))
        );
        Home_Pane.setLayer(mainTabbedPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        Home_Pane.setLayer(IP_Label, javax.swing.JLayeredPane.DEFAULT_LAYER);
        Home_Pane.setLayer(user_Label, javax.swing.JLayeredPane.DEFAULT_LAYER);
        Home_Pane.setLayer(Port_Label, javax.swing.JLayeredPane.DEFAULT_LAYER);

        connect_Menu.setText("Connection Settings");

        Connection_Menu.setText("Change Connection");
        Connection_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Connection_MenuActionPerformed(evt);
            }
        });
        connect_Menu.add(Connection_Menu);

        main_MenuBar.add(connect_Menu);

        logout_Menu.setText("Logout");

        Logout_Menu.setText("Logout");
        Logout_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Logout_MenuActionPerformed(evt);
            }
        });
        logout_Menu.add(Logout_Menu);

        main_MenuBar.add(logout_Menu);

        setJMenuBar(main_MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Home_Pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Home_Pane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Method to request to view class information
    //Method is called from within the Class search method
    private void class_view(String classID) {                                                 
        try{
            //send request to server given the class ID
            DataOutputStream outToServer = new DataOutputStream(
                clientSocket.getOutputStream());
            outToServer.writeBytes("CINF " +classID+ '\n');
            //print out the request
            System.out.println("CINF " +classID+ '\n');
            
            //receive server response
            BufferedReader inFromServer = new BufferedReader(
                new InputStreamReader(clientSocket.getInputStream()));
            String response = inFromServer.readLine();
            //parse the server response by spaces into an array
            String splitResponse [] = response.split(" ");
            //create a string made out of the first two array items to determine theresponse code
            String response_code = splitResponse[0]+" "+splitResponse[1];          
            //System.out.println(response);
            
            //enter a switch statement to determine how to respond
            switch(response_code){
                case "CINR 0":
                    //for every quotation set a marker, take the substrings within the markers and place them into responseVector
                    //-2 is our null
                    int left = -2;
                    int right = -2;
                    Vector<String> responseVector = new Vector<String>();
                    for(int i=0;i<response.length(); i++){
                        char c = response.charAt(i);
                        if (c == '\"'){
                            if (left == -2){
                                left = i+1;
                            }
                            else{
                                right = i;
                                responseVector.add(response.substring(left, right));
                                left = -2;
                                right = -2;
                            }
                        }
                    }
                    
                //take the vector that was created and transfer the data into a new vector (redundant) that will be used to fill the table
                //the vector will be placed into a model that will then be placed into the 
                DefaultTableModel defaultModel = (DefaultTableModel) class_viewTable.getModel();
                Vector newRow = new Vector();
                //Class ID
                newRow.add(responseVector.elementAt(0));
                //Class Name
                newRow.add(responseVector.elementAt(1));
                //Institution Name
                newRow.add(responseVector.elementAt(2));
                //Professor
                newRow.add(responseVector.elementAt(3));
                //Date and Time Row
                //add html tags for UI formatting
                String classTime = "<html>";
                classTime = classTime+responseVector.elementAt(4); 
                classTime = classTime + "</html>";
                //~~~~Needed for Correct formating~~~~
                classTime = classTime.replaceAll(",", "<br>");
                classTime = classTime.replaceAll(" ", "");
                newRow.add(classTime);
                
                //Add the rows to the model and place the model into the table
                defaultModel.addRow(newRow);
                class_viewTable.setModel(defaultModel);
                break;
                case "CINR 10": JOptionPane.showMessageDialog(null, "Error: Could not search classes :(");
                break;
                case "CINR 20": JOptionPane.showMessageDialog(null, "Error: User is not logged in :(");
                break;
                case "CINR 80": JOptionPane.showMessageDialog(null, "Error: Syntax error :(");
                break;
                default: JOptionPane.showMessageDialog(null, "Error: Syntax error :(");
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Can't search");
        };
    }
    
    private void Connection_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Connection_MenuActionPerformed
        
        JTextField server_Text = new JTextField();
        JTextField IP_Text = new JTextField();
        Object[] message = {
            "Port:", server_Text,
            "IP Address:", IP_Text
        };

        int option = JOptionPane.showConfirmDialog(null, message, "Connection Settings", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            try{
                //Receive form data
                this.IP = IP_Text.getText();
                this.Port = Integer.parseInt(server_Text.getText());
                
                //Data Validation
                if (this.IP.equals("")){
                    JOptionPane.showMessageDialog(null, "Enter an IP Address!");
                    return;
                }
                if (validIP(this.IP)==false){
                    JOptionPane.showMessageDialog(null, "Not a valid IP Address :(");
                    return;
                }
                if (server_Text.equals("")){
                    JOptionPane.showMessageDialog(null, "Enter a port number!");
                    return;
                }  
                
                //Connect to the server with form data
                this.clientSocket = new Socket(IP, Port);
                
                //Resend the Login request so that the server doesn't send an error
                DataOutputStream outToServer = new DataOutputStream(
                clientSocket.getOutputStream());
                outToServer.writeBytes("LOGN U " +'\"'+ userName + '\"' + " " + '\"' + password + '\"'+ '\n');
                
                //Reset the bottom labels to the new server connection
                user_Label.setText("<html><b>Username: </b>" + userName);
                IP_Label.setText("<html><b>IP Address: </b>" + IP);
                Port_Label.setText("<html><b>Port: </b>" + Port);
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Can't Connect");
            };
        }
    }//GEN-LAST:event_Connection_MenuActionPerformed

    private void Logout_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Logout_MenuActionPerformed
        //Logout Popup
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog (null, "Are you sure you want to logout?","Warning",dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION){
            try{          
                DataOutputStream outToServer = new DataOutputStream(
                clientSocket.getOutputStream());

                //Send logout request
                outToServer.writeBytes("LOGO" + "\n");
                //Print out request sent
                System.out.println("LOGO" + "\n");
                
                //Receive server response
                BufferedReader inFromServer = new BufferedReader(
                new InputStreamReader(clientSocket.getInputStream()));
                String response = inFromServer.readLine(); 
                //System.out.println(response);
                
                //Read response and act accordingly
                switch(response){
                    case "LGOR 0": JOptionPane.showMessageDialog(null, "Logged out!");
                    new SA_Launcher().setVisible(true);
                    this.dispose();
                        break;
                    case "LGOR 10": JOptionPane.showMessageDialog(null, "Error :(");
                        break;
                    case "LGOR 80": JOptionPane.showMessageDialog(null, "Error: Syntax error :(");
                        break;
                    default: JOptionPane.showMessageDialog(null, "Error: Syntax error :(");
                } 
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Error: Can't connect to server");
            }
        }
    }//GEN-LAST:event_Logout_MenuActionPerformed

    private void addClass_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addClass_ButtonActionPerformed
        //Receive data from table
        String registerClassID = class_viewTable.getValueAt(class_viewTable.getSelectedRow(), 0).toString();
        String registerClassName = class_viewTable.getValueAt(class_viewTable.getSelectedRow(), 1).toString();
        //Confirmation popup
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog (null, "Do you want to enroll in "+registerClassName+" ?","Warning",dialogButton);
        //On Yes click
        if(dialogResult == JOptionPane.YES_OPTION){    
            try{
                //Initialize MAC Address String
                String deviceID = new String();
                //Determine MAC Address
                InetAddress ip;
                try{
                    ip = InetAddress.getLocalHost();
                    NetworkInterface network = NetworkInterface.getByInetAddress(ip);
                    byte[] mac = network.getHardwareAddress();

                    StringBuilder sb = new StringBuilder();
                    for (int i = 0 ; i < mac.length; i++){
                        sb.append(String.format("%02X%s", mac[i], (i < mac.length - 1) ? ":" : ""));
                    }
                    deviceID = sb.toString();
                    } catch(UnknownHostException e){
                        e.printStackTrace();
                    }
                
                //Send add class request
                DataOutputStream outToServer = new DataOutputStream(
                    clientSocket.getOutputStream());
                outToServer.writeBytes("ENRL " +'\"'+ registerClassID + '\"' + " " + '\"' + deviceID + '\"'+ '\n');
                //Print out request
                System.out.println("ENRL " +'\"'+ registerClassID + '\"' + " " + '\"' + deviceID + '\"'+ '\n');
                
                BufferedReader inFromServer = new BufferedReader(
                    new InputStreamReader(clientSocket.getInputStream()));
                String response = inFromServer.readLine();
                //System.out.println(response);
                
                //Read response and act accordingly
                switch(response){
                    case "ENRR 0": JOptionPane.showMessageDialog(null, "You are now enrolled in "+registerClassName+" :)");
                    break;
                    case "ENRR 10": JOptionPane.showMessageDialog(null, "Error: Class does not exist :(");
                    break;
                    case "ENRR 20": JOptionPane.showMessageDialog(null, "Error: User is not logged in :(");
                    break;
                    case "ENRR 30": JOptionPane.showMessageDialog(null, "Error: Admin's cannot enroll in a class :(");
                    break;
                    case "ENRR 40": JOptionPane.showMessageDialog(null, "Error: User is already enrolled in "+registerClassName+"!");
                    break;
                    case "ENRR 80": JOptionPane.showMessageDialog(null, "Error: Syntax error :(");
                    break;
                    default: JOptionPane.showMessageDialog(null, "Error: Syntax error :(");
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Can't search");
            };
        }
    }//GEN-LAST:event_addClass_ButtonActionPerformed

    private void dropClass_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropClass_ButtonActionPerformed
        //Receive data from table
        String dropClassID = class_viewTable.getValueAt(class_viewTable.getSelectedRow(), 0).toString();
        String dropClassName = class_viewTable.getValueAt(class_viewTable.getSelectedRow(), 1).toString();
        //Confirmation popup
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog (null, "Are you sure you want to drop  "+dropClassName+" ?","Warning",dialogButton);
        //On yes click
        if(dialogResult == JOptionPane.YES_OPTION){    
            try{
                //Send request to server
                DataOutputStream outToServer = new DataOutputStream(
                    clientSocket.getOutputStream());
                outToServer.writeBytes("DROP " +'\"'+ dropClassID + '\"' +'\n');
                //Print request sent
                System.out.println("DROP " +'\"'+ dropClassID + '\"' +'\n');

                //Receive response from server
                BufferedReader inFromServer = new BufferedReader(
                    new InputStreamReader(clientSocket.getInputStream()));
                String response = inFromServer.readLine();
                //System.out.println(response);

                //Read response and act accordingly
                switch(response){
                    case "DRPR 0": JOptionPane.showMessageDialog(null, "You have successfully dropped "+dropClassName+" :(");
                    break;
                    case "DRPR 10": JOptionPane.showMessageDialog(null, "Error: Class does not exist :(");
                    break;
                    case "DRPR 20": JOptionPane.showMessageDialog(null, "Error: User is not logged in :(");
                    break;
                    case "DRPR 30": JOptionPane.showMessageDialog(null, "Error: Admin's cannot drop a class :(");
                    break;
                    case "DRPR 40": JOptionPane.showMessageDialog(null, "Error: User is not enrolled in "+dropClassName+"!");
                    break;
                    case "DRPR 80": JOptionPane.showMessageDialog(null, "Error: Syntax error :(");
                    break;
                    default: JOptionPane.showMessageDialog(null, "Error: Syntax error :(");
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Can't search");
            };
        }
    }//GEN-LAST:event_dropClass_ButtonActionPerformed

    private void class_srcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_class_srcButtonActionPerformed
        try{
            //Receive information from form
            String className = class_srcName.getText();
            String classAdmin = class_srcAdmin.getText();
            
            //Data Validation
            if (className.equals("")&&classAdmin.equals("")){
                JOptionPane.showMessageDialog(null, "Enter a search field!");
                return;
            }

            //Send class search request to server
            DataOutputStream outToServer = new DataOutputStream(
                clientSocket.getOutputStream());
            outToServer.writeBytes("CSRC " +"\"\" "+'\"'+ className + '\"' + " " + '\"' + classAdmin + '\"'+ '\n');
            //Print class search request
            System.out.println("CSRC " +"\"\" "+'\"'+ className + '\"' + " " + '\"' + classAdmin + '\"'+ '\n');

            //Receive server response
            BufferedReader inFromServer = new BufferedReader(
            new InputStreamReader(clientSocket.getInputStream()));
            String response = inFromServer.readLine();
            //parse response by spaces and place substrings into splitResponse array
            String splitResponse [] = response.split(" ");
            //Create String from the first two array items in order to determine response code
            String response_code = splitResponse[0]+" "+splitResponse[1];
            //System.out.println(response);
            
            //Read server response and act accordingly
            switch(response_code){
                case "CSRR 0":
                for (int i=2; i < splitResponse.length; i++){
                    class_view(splitResponse[i]);
                };
                break;
                case "CSRR 10": JOptionPane.showMessageDialog(null, "Error: Could not search classes :(");
                break;
                case "CSRR 20": JOptionPane.showMessageDialog(null, "Error: User is not logged in :(");
                break;
                case "CSRR 80": JOptionPane.showMessageDialog(null, "Error: Syntax error :(");
                break;
                default: JOptionPane.showMessageDialog(null, "Error: Syntax error :(");
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Can't search");
        };
    }//GEN-LAST:event_class_srcButtonActionPerformed

    private void attendClass_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attendClass_ButtonActionPerformed
        //collect needed variables from table
        String registerClassID = class_viewTable.getValueAt(class_viewTable.getSelectedRow(), 0).toString();
        String registerClassName = class_viewTable.getValueAt(class_viewTable.getSelectedRow(), 1).toString();
        String registerClassTime = class_viewTable.getValueAt(class_viewTable.getSelectedRow(), 4).toString();
            //determine MAC address
            try{
                String deviceID = new String();
                InetAddress ip;
                try{
                    ip = InetAddress.getLocalHost();
                    NetworkInterface network = NetworkInterface.getByInetAddress(ip);
                    byte[] mac = network.getHardwareAddress();

                    StringBuilder sb = new StringBuilder();
                    for (int i = 0 ; i < mac.length; i++){
                        sb.append(String.format("%02X%s", mac[i], (i < mac.length - 1) ? ":" : ""));
                    }
                    deviceID = sb.toString();
                    } catch(UnknownHostException e){
                        e.printStackTrace();
                    }
                //Set variable with current time
                Date now = new Date();
                //determine needed date formats
                DateFormat compareFormatDate = new SimpleDateFormat("E HH:mm");
                DateFormat serverFormatDate = new SimpleDateFormat("YYYY-MM-dd HH:mm:ss");
                
                //Create a vector with the class times(eee HH:mm)
                Vector<String> classTimeVector = new Vector<String>();
                //Initiate left and right pointers
                int left = -2, right = -2;
                for(int i=5;i<registerClassTime.length(); i++){
                        char c = registerClassTime.charAt(i);
                        if (c == '>'){
                            left = i+1;
                        }
                        else if (c == '<'){
                            right = i;
                            classTimeVector.add(registerClassTime.substring(left, right));
                        }
                    }
                //Build dates and check against now
                String dateDay = ""; 
                String classBegin = ""; 
                String classEnd = "";
                Date dateCompareOne = new Date();
                Date dateCompareTwo = new Date();
                //For every meet time create a date object to compare
                for(int i=0;i<classTimeVector.size(); i++){
                    String classTime = classTimeVector.elementAt(i);
                    //Translate from our notation to Java notation
                    switch(classTime.charAt(0)){
                        case 'M': dateDay = "Mon ";
                        break;
                        case 'T':  dateDay = "Tue ";
                        break;
                        case 'W':  dateDay = "Wed ";
                        break;
                        case 'R':  dateDay = "Thu ";
                        break;
                        case 'F':  dateDay = "Fri ";
                        break;
                        case 'S':  dateDay = "Sat ";
                        break;
                        case 'U':  dateDay = "Sun ";
                        break;
                        default: JOptionPane.showMessageDialog(null, "Error: Class Date in the wrong format :(");
                    }
                    
                    //pull date Strings
                    classBegin = dateDay + classTime.substring(1, 6);
                    System.out.println(classBegin);
                    classEnd = dateDay + classTime.substring(7, 12);
                    System.out.println(classEnd);
                    System.out.println(now.toString());
                    //convert Srings to Date objects
                    //System.out.println(compareFormatDate.parse(classBegin));
                    dateCompareOne = compareFormatDate.parse(classBegin);
                    dateCompareTwo = compareFormatDate.parse(classEnd);
                    System.out.println(dateCompareOne.toString());
                    System.out.println(dateCompareTwo.toString());
                    System.out.println(now.toString());
                    
                    //Set time to minutes
                    int nowMinutes = now.getHours()*60+now.getMinutes();
                    int beginMinutes = dateCompareOne.getHours()*60+dateCompareOne.getMinutes();
                    int endMinutes = dateCompareTwo.getHours()*60+dateCompareTwo.getMinutes();
                    
                    //reset variable
                    dateDay = ""; 
                    
                    //Compare total minutes, if the current time is within a meet time, follow through and send the attend request
                    if ( dateCompareOne.getDay() == now.getDay() && beginMinutes < nowMinutes && nowMinutes < endMinutes) {
                        String date = serverFormatDate.format(now);

                        //Send Attend Request
                        DataOutputStream outToServer = new DataOutputStream(
                            clientSocket.getOutputStream());
                        outToServer.writeBytes("ATTN " +'\"'+ registerClassID + '\"' + " " + '\"' + deviceID + '\"'+ " "+ '\"' + date + '\"' + '\n');
                        //Print Attend Request
                        System.out.println("ATTN " +'\"'+ registerClassID + '\"' + " " + '\"' + deviceID + '\"'+ " "+ '\"' + date + '\"' + '\n');

                        //Receive server response
                        BufferedReader inFromServer = new BufferedReader(
                            new InputStreamReader(clientSocket.getInputStream()));
                        String response = inFromServer.readLine();
                        //System.out.println(response);
                        
                        //Read response and act accordingly
                        switch(response){
                            case "ATNR 0": JOptionPane.showMessageDialog(null, "You successfully signed in to "+registerClassName+" :)");
                            return;
                            case "ATNR 10": JOptionPane.showMessageDialog(null, "Error: Class does not exist :(");
                            return;
                            case "ATNR 20": JOptionPane.showMessageDialog(null, "Error: User is not logged in :(");
                            return;
                            case "ATNR 30": JOptionPane.showMessageDialog(null, "Error: Admin's cannot attend a class :(");
                            return;
                            case "ATNR 40": JOptionPane.showMessageDialog(null, "Error: User is not enrolled in "+registerClassName+"!");
                            return;
                            case "ATNR 50": JOptionPane.showMessageDialog(null, "Error: Device does not match the device registered with :(");
                            return;
                            case "ATNR 80": JOptionPane.showMessageDialog(null, "Error: Syntax error :(");
                            return;
                            default: JOptionPane.showMessageDialog(null, "Error: Syntax error :(");
                        }
                    }    
                }
                JOptionPane.showMessageDialog(null, "Class isn't currently in session :(");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Can't Attend");
            };
        
    }//GEN-LAST:event_attendClass_ButtonActionPerformed

    private void chkAttend_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAttend_ButtonActionPerformed
        try{         
            //collect form data
            String classID = attendClassID_Text.getText();
            
            //Data Validation
            if (classID.equals("")){
                JOptionPane.showMessageDialog(null, "Enter a Class ID!");
                return;
            }
            
            //write to server
            DataOutputStream outToServer = new DataOutputStream(
            clientSocket.getOutputStream());
            outToServer.writeBytes("CCHK \"" + classID + "\"\n");
            //Print out response to server
            System.out.println("CCHK \"" + classID + "\"\n");
            
            //recieve server response
            BufferedReader inFromServer = new BufferedReader(
            new InputStreamReader(clientSocket.getInputStream()));
            String response = inFromServer.readLine(); 
            //System.out.println(response);
            
            //split response by spaces and place inside an array
            String splitResponse [] = response.split(" ");
            //form a string from the first two array items to read the response code
            String response_code = splitResponse[0]+" "+splitResponse[1];
            
            //form a switch statement to react to the server response accordingly
            switch(response_code){
                case "CCHK 0":
                    //-2 is our null
                    int left = -2;
                    int right = -2;
                    //parse the original server response by putting strings between quotation marks into a vector as vector elements
                    Vector<String> responseVector = new Vector<String>();
                    for(int i=0;i<response.length(); i++){
                        char c = response.charAt(i);
                        if (c == '\"'){
                            if (left == -2){
                                left = i+1;
                            }
                            else{
                                right = i;
                                responseVector.add(response.substring(left, right));
                                left = -2;
                                right = -2;
                            }
                        }
                    }
                    //preload a vector with the class information in order to display the the same class information for every attendence record
                    DefaultTableModel defaultModel = (DefaultTableModel) chkAttendanceTable.getModel();
                    Vector masterRow = new Vector();
                    //Class ID
                    masterRow.add(responseVector.elementAt(0));
                    //Class Name
                    masterRow.add(responseVector.elementAt(1));
                    //Institution Name
                    masterRow.add(responseVector.elementAt(2));
                    //Professor
                    masterRow.add(responseVector.elementAt(3));

                    Vector<String> newRow = new Vector<String>();

                    for(int i = 4; i < responseVector.size();i+=2){
                        newRow = (Vector<String>)masterRow.clone();
                        //Attendance Code
                        newRow.add(responseVector.elementAt(i));
                        //Attendance Date and Time
                        newRow.add(responseVector.elementAt(i+1));
                        //Add Row
                        defaultModel.addRow(newRow);
                    }
                    chkAttendanceTable.setModel(defaultModel);
                break;  
                case "CCHK 10": JOptionPane.showMessageDialog(null, "Error: Class does not exist :(");
                break;
                case "CCHK 20": JOptionPane.showMessageDialog(null, "Error: User is not logged in :(");
                break;
                case "CCHK 30": JOptionPane.showMessageDialog(null, "Error: Admin's cannot check class attendence :(");
                break;
                case "CCHK 40": JOptionPane.showMessageDialog(null, "Error: User is not enrolled in class with the classID "+classID+"!");
                break;
                case "CCHK 80": JOptionPane.showMessageDialog(null, "Error: Syntax error :(");
                break;
                default: JOptionPane.showMessageDialog(null, "Error: Syntax error :(");
            } 
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Error: Can't connect to server");
        }
    }//GEN-LAST:event_chkAttend_ButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SA_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SA_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SA_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SA_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new SA_Main().setVisible(false);
                //new SA_Launcher().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Connection_Menu;
    private javax.swing.JLayeredPane Home_Pane;
    private javax.swing.JLabel IP_Label;
    private javax.swing.JMenuItem Logout_Menu;
    private javax.swing.JLabel Port_Label;
    private javax.swing.JButton addClass_Button;
    private javax.swing.JLabel attendClassID_Label;
    private javax.swing.JTextField attendClassID_Text;
    private javax.swing.JButton attendClass_Button;
    private javax.swing.JPanel attendanceSrc_Panel;
    private javax.swing.JLabel attendance_Label;
    private javax.swing.JButton chkAttend_Button;
    private javax.swing.JTable chkAttendanceTable;
    private javax.swing.JScrollPane chkAttendance_scrollPanel;
    private javax.swing.JPanel classSrc_Panel;
    private javax.swing.JScrollPane class_scrollPanel;
    private javax.swing.JTextField class_srcAdmin;
    private javax.swing.JButton class_srcButton;
    private javax.swing.JLabel class_srcLabel;
    private javax.swing.JTextField class_srcName;
    private javax.swing.JTable class_viewTable;
    private javax.swing.JMenu connect_Menu;
    private javax.swing.JButton dropClass_Button;
    private javax.swing.JLabel instructor_srcLabel;
    private javax.swing.JMenu logout_Menu;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JMenuBar main_MenuBar;
    private javax.swing.JLabel user_Label;
    // End of variables declaration//GEN-END:variables
}
